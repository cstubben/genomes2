ncbiSRA<-function(term, parse=TRUE)
{
   db <- "sra"
   url <- "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/"
   esearch <- paste(url, "esearch.fcgi?retmax=1&tool=ncbiSRA.R&email=stubben@lanl.gov&usehistory=y&db=", 
        db, "&term=", gsub(" ", "%20", term), sep = "")
   gp <- readLines(esearch)
   connecterror <- grepl("ERROR", gp)
   if (any(connecterror)) { stop("Error connecting to NCBI ", gp[connecterror])}

   x <- unlist( strsplit( gp[3], "<[^>]*>" ))
   x <- x[x != ""]   

   if (!x[1] > 0) { stop("No matches to ", term, " found") }
   print(paste( "Matches", x[1], "projects"))
  
   efetch <- paste(url, "efetch.fcgi?db=", db, "&query_key=", x[4], "&WebEnv=", x[5], sep = "")
   gp <- readLines(efetch)
  
   doc <- xmlRoot(xmlParse(gp))
   if(parse){
      z <- getNodeSet(doc, "//EXPERIMENT_PACKAGE")
      n <- length(z)
      sra <- vector("list", n)
      for (i in 1:n) {
         z2 <- xmlDoc(z[[i]])
         #EXPERIMENT
         experiment  <-  xattr(z2, "//EXPERIMENT", "accession")       
         exp_title   <- xvalue(z2, "//EXPERIMENT/TITLE")
         #LIBRARY
         library     <- xvalue(z2, "//LIBRARY_DESCRIPTOR/LIBRARY_NAME")
         strategy    <- xvalue(z2, "//LIBRARY_DESCRIPTOR/LIBRARY_STRATEGY")
         selection   <- xvalue(z2, "//LIBRARY_DESCRIPTOR/LIBRARY_SELECTION")        
         # skip SPOT_DESCRIPTOR?
         platform    <- xpathSApply(z2, "//PLATFORM/*", xmlName)
         model       <- xvalue(z2, "//INSTRUMENT_MODEL")
         #skip PROCESSING? Base calls and quality scores
         #SUBMISSION
         submission  <- xattr(z2, "//SUBMISSION", "accession")
         submitted   <- xattr(z2, "//SUBMISSION", "submission_date")
         submitted   <- as.Date(substring( submitted, 1,10))
         #  lab_name <- xattr(z2, "//SUBMISSION", "lab_name")
         submit_comment <-xattr(z2, "//SUBMISSION", "submission_comment")
         #STUDY
         study       <-  xattr(z2, "//STUDY", "accession")
         study_title <- xvalue(z2, "//STUDY_TITLE")
         abstract    <- xvalue(z2, "//STUDY_ABSTRACT")
         type        <- xattr(z2, "//STUDY_TYPE", "existing_study_type")
         #CENTER
         center      <- xvalue(z2, "//CENTER_NAME")
         center_title<- xvalue(z2, "//CENTER_PROJECT_NAME")
         # PROJECT 
         pid         <- xvalue(z2, "//RELATED_LINK/ID")
         pacc        <- xvalue(z2, "//RELATED_LINK/LABEL")
         # SAMPLE
         sample <- xattr(z2, "//SAMPLE", "accession")
         sample_alias<-  xattr(z2, "//SAMPLE", "alias")   # same as STUDY refname
         sample_title<- xvalue(z2, "//SAMPLE/TITLE")
         sample_descr<- xvalue(z2, "//SAMPLE/DESCRIPTION")
         # TAXONOMY
         taxid       <- as.numeric( xvalue(z2, "//TAXON_ID"))
         name        <- xvalue(z2, "//SCIENTIFIC_NAME")
         if(is.na(name)) name <-xvalue(z2, "//COMMON_NAME")
         biosample   <- as.numeric( xvalue(z2, "//ENTREZ_LINK/ID" ))
         #RUNS (often multiple RUNS)  -xattr returns first attribute only (use xattr2 below)
         
         runs  <- paste( xattr2(z2, "//RUN", "accession"), collapse=",")
         bases <- sum(as.numeric( xattr2(z2, "//RUN", "bases")))
         reads <- sum(as.numeric( xattr2(z2, "//RUN", "spots")))
         # run_date -get first, earliest, all?
         run_date <- substr( xattr2(z2, "//RUN", "run_date"),1,10)
         if(!is.na(run_date[1])) run_date  <- min(as.Date(run_date), na.rm=TRUE)

         sra[[i]] <- data.frame(taxid, name, experiment, sample, submission, study, type, reads, bases, exp_title ,
                      library, strategy, selection, platform, model, submitted, submit_comment, 
                     study_title, abstract, center , center_title, pid, pacc, sample_alias, sample_title,
                     sample_descr, biosample, runs, run_date, stringsAsFactors = FALSE)
         
         free(z2)
      }
      sra <- do.call("rbind", sra)
      sra <- sra[order(sra$name),]
      class(sra$run_date)<-"Date"
      rownames(sra) <- NULL
      sra
   # NO PARSING
   }else{
      doc
   }
}


# 2) attributes within tags, return all values in multiple tags (xattr only returns first)

xattr2 <-function(doc, name, att) {
      y <- xpathApply(doc, name, xmlAttrs)
     # no matches to name (give warning)
      if(length(y)==0){ 
         NA 
     } else{
      if( att %in% names(y[[1]]) )
         sapply(y, "[[", att)
      else NA
     }
}
 
